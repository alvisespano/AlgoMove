// Signature file for parser generated by fsyacc
module AlgoMove.Transpiler.Parser
type token = 
  | EOF
  | MODULE
  | STRUCT
  | HAS
  | COPY
  | DROP
  | KEY
  | STORE
  | PUBLIC
  | ENTRY
  | USE
  | NATIVE
  | U8
  | U16
  | U32
  | U64
  | U128
  | BOOL
  | ADDRESS
  | AMP
  | MUT
  | STAR
  | ABRA
  | AKET
  | PLUS
  | BRA
  | KET
  | SQBRA
  | SQKET
  | CURBRA
  | CURKET
  | COLON
  | DOT
  | COMMA
  | COLON2
  | SEMICOLON
  | MOVLOC
  | CPYLOC
  | STLOC
  | CALL
  | LDU8
  | LDU16
  | LDU32
  | LDU64
  | LDCONST
  | LDTRUE
  | LDFALSE
  | CASTU8
  | CASTU16
  | CASTU32
  | CASTU64
  | BRANCH
  | BRTRUE
  | BRFALSE
  | NOP
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | BOR
  | BAND
  | OR
  | AND
  | XOR
  | NOT
  | SHL
  | SHR
  | POP
  | ABORT
  | READREF
  | WRITEREF
  | FREEZEREF
  | RET
  | BORROWLOC
  | BORROWFIELD
  | BORROWGLOBAL
  | PACK
  | UNPACK
  | EXISTS
  | MOVETO
  | MOVEFROM
  | ID of (System.String)
  | NUM of (System.String)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_MODULE
    | TOKEN_STRUCT
    | TOKEN_HAS
    | TOKEN_COPY
    | TOKEN_DROP
    | TOKEN_KEY
    | TOKEN_STORE
    | TOKEN_PUBLIC
    | TOKEN_ENTRY
    | TOKEN_USE
    | TOKEN_NATIVE
    | TOKEN_U8
    | TOKEN_U16
    | TOKEN_U32
    | TOKEN_U64
    | TOKEN_U128
    | TOKEN_BOOL
    | TOKEN_ADDRESS
    | TOKEN_AMP
    | TOKEN_MUT
    | TOKEN_STAR
    | TOKEN_ABRA
    | TOKEN_AKET
    | TOKEN_PLUS
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_CURBRA
    | TOKEN_CURKET
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_COLON2
    | TOKEN_SEMICOLON
    | TOKEN_MOVLOC
    | TOKEN_CPYLOC
    | TOKEN_STLOC
    | TOKEN_CALL
    | TOKEN_LDU8
    | TOKEN_LDU16
    | TOKEN_LDU32
    | TOKEN_LDU64
    | TOKEN_LDCONST
    | TOKEN_LDTRUE
    | TOKEN_LDFALSE
    | TOKEN_CASTU8
    | TOKEN_CASTU16
    | TOKEN_CASTU32
    | TOKEN_CASTU64
    | TOKEN_BRANCH
    | TOKEN_BRTRUE
    | TOKEN_BRFALSE
    | TOKEN_NOP
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_BOR
    | TOKEN_BAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_XOR
    | TOKEN_NOT
    | TOKEN_SHL
    | TOKEN_SHR
    | TOKEN_POP
    | TOKEN_ABORT
    | TOKEN_READREF
    | TOKEN_WRITEREF
    | TOKEN_FREEZEREF
    | TOKEN_RET
    | TOKEN_BORROWLOC
    | TOKEN_BORROWFIELD
    | TOKEN_BORROWGLOBAL
    | TOKEN_PACK
    | TOKEN_UNPACK
    | TOKEN_EXISTS
    | TOKEN_MOVETO
    | TOKEN_MOVEFROM
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startModule
    | NONTERM_Module
    | NONTERM_imports
    | NONTERM_imports_
    | NONTERM_import
    | NONTERM_structs
    | NONTERM_structs_
    | NONTERM_structt
    | NONTERM_has_capabs
    | NONTERM_fields
    | NONTERM_funs
    | NONTERM_funn
    | NONTERM_ty_params
    | NONTERM_ty_param
    | NONTERM_ty_param_capabs
    | NONTERM_optbody
    | NONTERM_param
    | NONTERM_params
    | NONTERM_body
    | NONTERM_bodyline
    | NONTERM_quals
    | NONTERM_qual
    | NONTERM_return_ty
    | NONTERM_ty
    | NONTERM_ty_args
    | NONTERM_ty_tuple
    | NONTERM_capabs
    | NONTERM_capab
    | NONTERM_qid
    | NONTERM_tys
    | NONTERM_index
    | NONTERM_label
    | NONTERM_argtys
    | NONTERM_opcode
    | NONTERM_const
    | NONTERM_const_ty
    | NONTERM_nums
    | NONTERM_opcode_type
    | NONTERM_opcodes_index
    | NONTERM_opcodes_label
    | NONTERM_opcodes_no_imm
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Module : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( AlgoMove.Transpiler.Absyn.Move.Module ) 
