// Implementation file for parser generated by fsyacc
module AlgoMove.Transpiler.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open AlgoMove.Transpiler.Absyn

open FSharp.Common
open FSharp.Common.Parsing.LexYacc
open AlgoMove.Transpiler 
open AlgoMove.Transpiler.Absyn.Move

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))


# 19 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | MODULE
  | STRUCT
  | HAS
  | COPY
  | DROP
  | KEY
  | STORE
  | PUBLIC
  | ENTRY
  | USE
  | NATIVE
  | U8
  | U64
  | U128
  | BOOL
  | ADDRESS
  | AMP
  | MUT
  | STAR
  | BRA
  | KET
  | SQBRA
  | SQKET
  | CURBRA
  | CURKET
  | COLON
  | DOT
  | COMMA
  | COLON2
  | SEMICOLON
  | MOVLOC
  | CPYLOC
  | STLOC
  | CALL
  | LDU8
  | LDU128
  | LDU64
  | LDCONST
  | LDTRUE
  | LDFALSE
  | BRANCH
  | BRTRUE
  | BRFALSE
  | NOP
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | BOR
  | BAND
  | OR
  | AND
  | XOR
  | NOT
  | SHL
  | SHR
  | POP
  | ABORT
  | READREF
  | WRITEREF
  | FREEZEREF
  | RET
  | BORROWLOC
  | BORROWFIELD
  | BORROWGLOBAL
  | PACK
  | UNPACK
  | EXISTS
  | MOVETO
  | MOVEFROM
  | ID of (System.String)
  | NUM of (System.String)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_MODULE
    | TOKEN_STRUCT
    | TOKEN_HAS
    | TOKEN_COPY
    | TOKEN_DROP
    | TOKEN_KEY
    | TOKEN_STORE
    | TOKEN_PUBLIC
    | TOKEN_ENTRY
    | TOKEN_USE
    | TOKEN_NATIVE
    | TOKEN_U8
    | TOKEN_U64
    | TOKEN_U128
    | TOKEN_BOOL
    | TOKEN_ADDRESS
    | TOKEN_AMP
    | TOKEN_MUT
    | TOKEN_STAR
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_CURBRA
    | TOKEN_CURKET
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_COLON2
    | TOKEN_SEMICOLON
    | TOKEN_MOVLOC
    | TOKEN_CPYLOC
    | TOKEN_STLOC
    | TOKEN_CALL
    | TOKEN_LDU8
    | TOKEN_LDU128
    | TOKEN_LDU64
    | TOKEN_LDCONST
    | TOKEN_LDTRUE
    | TOKEN_LDFALSE
    | TOKEN_BRANCH
    | TOKEN_BRTRUE
    | TOKEN_BRFALSE
    | TOKEN_NOP
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_BOR
    | TOKEN_BAND
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_XOR
    | TOKEN_NOT
    | TOKEN_SHL
    | TOKEN_SHR
    | TOKEN_POP
    | TOKEN_ABORT
    | TOKEN_READREF
    | TOKEN_WRITEREF
    | TOKEN_FREEZEREF
    | TOKEN_RET
    | TOKEN_BORROWLOC
    | TOKEN_BORROWFIELD
    | TOKEN_BORROWGLOBAL
    | TOKEN_PACK
    | TOKEN_UNPACK
    | TOKEN_EXISTS
    | TOKEN_MOVETO
    | TOKEN_MOVEFROM
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_imports
    | NONTERM_imports_
    | NONTERM_import
    | NONTERM_structs
    | NONTERM_structs_
    | NONTERM_structt
    | NONTERM_has_capabs
    | NONTERM_fields
    | NONTERM_funs
    | NONTERM_funn
    | NONTERM_optbody
    | NONTERM_arg
    | NONTERM_args
    | NONTERM_body
    | NONTERM_bodyline
    | NONTERM_quals
    | NONTERM_qual
    | NONTERM_return_ty
    | NONTERM_ty
    | NONTERM_ty_tuple
    | NONTERM_capabs
    | NONTERM_capab
    | NONTERM_qid
    | NONTERM_qid_parts
    | NONTERM_qid_part
    | NONTERM_tys
    | NONTERM_index
    | NONTERM_label
    | NONTERM_argtys
    | NONTERM_opcode
    | NONTERM_const
    | NONTERM_const_ty
    | NONTERM_nums
    | NONTERM_opcode_typename
    | NONTERM_opcodes_index
    | NONTERM_opcodes_label
    | NONTERM_opcodes_no_imm

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | MODULE  -> 1 
  | STRUCT  -> 2 
  | HAS  -> 3 
  | COPY  -> 4 
  | DROP  -> 5 
  | KEY  -> 6 
  | STORE  -> 7 
  | PUBLIC  -> 8 
  | ENTRY  -> 9 
  | USE  -> 10 
  | NATIVE  -> 11 
  | U8  -> 12 
  | U64  -> 13 
  | U128  -> 14 
  | BOOL  -> 15 
  | ADDRESS  -> 16 
  | AMP  -> 17 
  | MUT  -> 18 
  | STAR  -> 19 
  | BRA  -> 20 
  | KET  -> 21 
  | SQBRA  -> 22 
  | SQKET  -> 23 
  | CURBRA  -> 24 
  | CURKET  -> 25 
  | COLON  -> 26 
  | DOT  -> 27 
  | COMMA  -> 28 
  | COLON2  -> 29 
  | SEMICOLON  -> 30 
  | MOVLOC  -> 31 
  | CPYLOC  -> 32 
  | STLOC  -> 33 
  | CALL  -> 34 
  | LDU8  -> 35 
  | LDU128  -> 36 
  | LDU64  -> 37 
  | LDCONST  -> 38 
  | LDTRUE  -> 39 
  | LDFALSE  -> 40 
  | BRANCH  -> 41 
  | BRTRUE  -> 42 
  | BRFALSE  -> 43 
  | NOP  -> 44 
  | ADD  -> 45 
  | SUB  -> 46 
  | MUL  -> 47 
  | DIV  -> 48 
  | MOD  -> 49 
  | EQ  -> 50 
  | NEQ  -> 51 
  | LT  -> 52 
  | LE  -> 53 
  | GT  -> 54 
  | GE  -> 55 
  | BOR  -> 56 
  | BAND  -> 57 
  | OR  -> 58 
  | AND  -> 59 
  | XOR  -> 60 
  | NOT  -> 61 
  | SHL  -> 62 
  | SHR  -> 63 
  | POP  -> 64 
  | ABORT  -> 65 
  | READREF  -> 66 
  | WRITEREF  -> 67 
  | FREEZEREF  -> 68 
  | RET  -> 69 
  | BORROWLOC  -> 70 
  | BORROWFIELD  -> 71 
  | BORROWGLOBAL  -> 72 
  | PACK  -> 73 
  | UNPACK  -> 74 
  | EXISTS  -> 75 
  | MOVETO  -> 76 
  | MOVEFROM  -> 77 
  | ID _ -> 78 
  | NUM _ -> 79 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_MODULE 
  | 2 -> TOKEN_STRUCT 
  | 3 -> TOKEN_HAS 
  | 4 -> TOKEN_COPY 
  | 5 -> TOKEN_DROP 
  | 6 -> TOKEN_KEY 
  | 7 -> TOKEN_STORE 
  | 8 -> TOKEN_PUBLIC 
  | 9 -> TOKEN_ENTRY 
  | 10 -> TOKEN_USE 
  | 11 -> TOKEN_NATIVE 
  | 12 -> TOKEN_U8 
  | 13 -> TOKEN_U64 
  | 14 -> TOKEN_U128 
  | 15 -> TOKEN_BOOL 
  | 16 -> TOKEN_ADDRESS 
  | 17 -> TOKEN_AMP 
  | 18 -> TOKEN_MUT 
  | 19 -> TOKEN_STAR 
  | 20 -> TOKEN_BRA 
  | 21 -> TOKEN_KET 
  | 22 -> TOKEN_SQBRA 
  | 23 -> TOKEN_SQKET 
  | 24 -> TOKEN_CURBRA 
  | 25 -> TOKEN_CURKET 
  | 26 -> TOKEN_COLON 
  | 27 -> TOKEN_DOT 
  | 28 -> TOKEN_COMMA 
  | 29 -> TOKEN_COLON2 
  | 30 -> TOKEN_SEMICOLON 
  | 31 -> TOKEN_MOVLOC 
  | 32 -> TOKEN_CPYLOC 
  | 33 -> TOKEN_STLOC 
  | 34 -> TOKEN_CALL 
  | 35 -> TOKEN_LDU8 
  | 36 -> TOKEN_LDU128 
  | 37 -> TOKEN_LDU64 
  | 38 -> TOKEN_LDCONST 
  | 39 -> TOKEN_LDTRUE 
  | 40 -> TOKEN_LDFALSE 
  | 41 -> TOKEN_BRANCH 
  | 42 -> TOKEN_BRTRUE 
  | 43 -> TOKEN_BRFALSE 
  | 44 -> TOKEN_NOP 
  | 45 -> TOKEN_ADD 
  | 46 -> TOKEN_SUB 
  | 47 -> TOKEN_MUL 
  | 48 -> TOKEN_DIV 
  | 49 -> TOKEN_MOD 
  | 50 -> TOKEN_EQ 
  | 51 -> TOKEN_NEQ 
  | 52 -> TOKEN_LT 
  | 53 -> TOKEN_LE 
  | 54 -> TOKEN_GT 
  | 55 -> TOKEN_GE 
  | 56 -> TOKEN_BOR 
  | 57 -> TOKEN_BAND 
  | 58 -> TOKEN_OR 
  | 59 -> TOKEN_AND 
  | 60 -> TOKEN_XOR 
  | 61 -> TOKEN_NOT 
  | 62 -> TOKEN_SHL 
  | 63 -> TOKEN_SHR 
  | 64 -> TOKEN_POP 
  | 65 -> TOKEN_ABORT 
  | 66 -> TOKEN_READREF 
  | 67 -> TOKEN_WRITEREF 
  | 68 -> TOKEN_FREEZEREF 
  | 69 -> TOKEN_RET 
  | 70 -> TOKEN_BORROWLOC 
  | 71 -> TOKEN_BORROWFIELD 
  | 72 -> TOKEN_BORROWGLOBAL 
  | 73 -> TOKEN_PACK 
  | 74 -> TOKEN_UNPACK 
  | 75 -> TOKEN_EXISTS 
  | 76 -> TOKEN_MOVETO 
  | 77 -> TOKEN_MOVEFROM 
  | 78 -> TOKEN_ID 
  | 79 -> TOKEN_NUM 
  | 82 -> TOKEN_end_of_input
  | 80 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprogram 
    | 1 -> NONTERM_program 
    | 2 -> NONTERM_imports 
    | 3 -> NONTERM_imports 
    | 4 -> NONTERM_imports_ 
    | 5 -> NONTERM_imports_ 
    | 6 -> NONTERM_import 
    | 7 -> NONTERM_structs 
    | 8 -> NONTERM_structs 
    | 9 -> NONTERM_structs_ 
    | 10 -> NONTERM_structs_ 
    | 11 -> NONTERM_structt 
    | 12 -> NONTERM_has_capabs 
    | 13 -> NONTERM_has_capabs 
    | 14 -> NONTERM_fields 
    | 15 -> NONTERM_funs 
    | 16 -> NONTERM_funs 
    | 17 -> NONTERM_funn 
    | 18 -> NONTERM_optbody 
    | 19 -> NONTERM_optbody 
    | 20 -> NONTERM_arg 
    | 21 -> NONTERM_args 
    | 22 -> NONTERM_args 
    | 23 -> NONTERM_args 
    | 24 -> NONTERM_body 
    | 25 -> NONTERM_body 
    | 26 -> NONTERM_bodyline 
    | 27 -> NONTERM_bodyline 
    | 28 -> NONTERM_bodyline 
    | 29 -> NONTERM_quals 
    | 30 -> NONTERM_quals 
    | 31 -> NONTERM_qual 
    | 32 -> NONTERM_qual 
    | 33 -> NONTERM_qual 
    | 34 -> NONTERM_return_ty 
    | 35 -> NONTERM_return_ty 
    | 36 -> NONTERM_return_ty 
    | 37 -> NONTERM_ty 
    | 38 -> NONTERM_ty 
    | 39 -> NONTERM_ty 
    | 40 -> NONTERM_ty 
    | 41 -> NONTERM_ty 
    | 42 -> NONTERM_ty 
    | 43 -> NONTERM_ty 
    | 44 -> NONTERM_ty_tuple 
    | 45 -> NONTERM_ty_tuple 
    | 46 -> NONTERM_capabs 
    | 47 -> NONTERM_capabs 
    | 48 -> NONTERM_capab 
    | 49 -> NONTERM_capab 
    | 50 -> NONTERM_capab 
    | 51 -> NONTERM_capab 
    | 52 -> NONTERM_qid 
    | 53 -> NONTERM_qid_parts 
    | 54 -> NONTERM_qid_parts 
    | 55 -> NONTERM_qid_parts 
    | 56 -> NONTERM_qid_part 
    | 57 -> NONTERM_qid_part 
    | 58 -> NONTERM_tys 
    | 59 -> NONTERM_tys 
    | 60 -> NONTERM_index 
    | 61 -> NONTERM_label 
    | 62 -> NONTERM_argtys 
    | 63 -> NONTERM_argtys 
    | 64 -> NONTERM_opcode 
    | 65 -> NONTERM_opcode 
    | 66 -> NONTERM_opcode 
    | 67 -> NONTERM_opcode 
    | 68 -> NONTERM_opcode 
    | 69 -> NONTERM_opcode 
    | 70 -> NONTERM_opcode 
    | 71 -> NONTERM_opcode 
    | 72 -> NONTERM_opcode 
    | 73 -> NONTERM_opcode 
    | 74 -> NONTERM_const 
    | 75 -> NONTERM_const_ty 
    | 76 -> NONTERM_const_ty 
    | 77 -> NONTERM_nums 
    | 78 -> NONTERM_nums 
    | 79 -> NONTERM_opcode_typename 
    | 80 -> NONTERM_opcode_typename 
    | 81 -> NONTERM_opcode_typename 
    | 82 -> NONTERM_opcode_typename 
    | 83 -> NONTERM_opcode_typename 
    | 84 -> NONTERM_opcode_typename 
    | 85 -> NONTERM_opcodes_index 
    | 86 -> NONTERM_opcodes_index 
    | 87 -> NONTERM_opcodes_index 
    | 88 -> NONTERM_opcodes_index 
    | 89 -> NONTERM_opcodes_label 
    | 90 -> NONTERM_opcodes_label 
    | 91 -> NONTERM_opcodes_label 
    | 92 -> NONTERM_opcodes_no_imm 
    | 93 -> NONTERM_opcodes_no_imm 
    | 94 -> NONTERM_opcodes_no_imm 
    | 95 -> NONTERM_opcodes_no_imm 
    | 96 -> NONTERM_opcodes_no_imm 
    | 97 -> NONTERM_opcodes_no_imm 
    | 98 -> NONTERM_opcodes_no_imm 
    | 99 -> NONTERM_opcodes_no_imm 
    | 100 -> NONTERM_opcodes_no_imm 
    | 101 -> NONTERM_opcodes_no_imm 
    | 102 -> NONTERM_opcodes_no_imm 
    | 103 -> NONTERM_opcodes_no_imm 
    | 104 -> NONTERM_opcodes_no_imm 
    | 105 -> NONTERM_opcodes_no_imm 
    | 106 -> NONTERM_opcodes_no_imm 
    | 107 -> NONTERM_opcodes_no_imm 
    | 108 -> NONTERM_opcodes_no_imm 
    | 109 -> NONTERM_opcodes_no_imm 
    | 110 -> NONTERM_opcodes_no_imm 
    | 111 -> NONTERM_opcodes_no_imm 
    | 112 -> NONTERM_opcodes_no_imm 
    | 113 -> NONTERM_opcodes_no_imm 
    | 114 -> NONTERM_opcodes_no_imm 
    | 115 -> NONTERM_opcodes_no_imm 
    | 116 -> NONTERM_opcodes_no_imm 
    | 117 -> NONTERM_opcodes_no_imm 
    | 118 -> NONTERM_opcodes_no_imm 
    | 119 -> NONTERM_opcodes_no_imm 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 82 
let _fsyacc_tagOfErrorTerminal = 80

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | MODULE  -> "MODULE" 
  | STRUCT  -> "STRUCT" 
  | HAS  -> "HAS" 
  | COPY  -> "COPY" 
  | DROP  -> "DROP" 
  | KEY  -> "KEY" 
  | STORE  -> "STORE" 
  | PUBLIC  -> "PUBLIC" 
  | ENTRY  -> "ENTRY" 
  | USE  -> "USE" 
  | NATIVE  -> "NATIVE" 
  | U8  -> "U8" 
  | U64  -> "U64" 
  | U128  -> "U128" 
  | BOOL  -> "BOOL" 
  | ADDRESS  -> "ADDRESS" 
  | AMP  -> "AMP" 
  | MUT  -> "MUT" 
  | STAR  -> "STAR" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | SQBRA  -> "SQBRA" 
  | SQKET  -> "SQKET" 
  | CURBRA  -> "CURBRA" 
  | CURKET  -> "CURKET" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | COMMA  -> "COMMA" 
  | COLON2  -> "COLON2" 
  | SEMICOLON  -> "SEMICOLON" 
  | MOVLOC  -> "MOVLOC" 
  | CPYLOC  -> "CPYLOC" 
  | STLOC  -> "STLOC" 
  | CALL  -> "CALL" 
  | LDU8  -> "LDU8" 
  | LDU128  -> "LDU128" 
  | LDU64  -> "LDU64" 
  | LDCONST  -> "LDCONST" 
  | LDTRUE  -> "LDTRUE" 
  | LDFALSE  -> "LDFALSE" 
  | BRANCH  -> "BRANCH" 
  | BRTRUE  -> "BRTRUE" 
  | BRFALSE  -> "BRFALSE" 
  | NOP  -> "NOP" 
  | ADD  -> "ADD" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | BOR  -> "BOR" 
  | BAND  -> "BAND" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | XOR  -> "XOR" 
  | NOT  -> "NOT" 
  | SHL  -> "SHL" 
  | SHR  -> "SHR" 
  | POP  -> "POP" 
  | ABORT  -> "ABORT" 
  | READREF  -> "READREF" 
  | WRITEREF  -> "WRITEREF" 
  | FREEZEREF  -> "FREEZEREF" 
  | RET  -> "RET" 
  | BORROWLOC  -> "BORROWLOC" 
  | BORROWFIELD  -> "BORROWFIELD" 
  | BORROWGLOBAL  -> "BORROWGLOBAL" 
  | PACK  -> "PACK" 
  | UNPACK  -> "UNPACK" 
  | EXISTS  -> "EXISTS" 
  | MOVETO  -> "MOVETO" 
  | MOVEFROM  -> "MOVEFROM" 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | HAS  -> (null : System.Object) 
  | COPY  -> (null : System.Object) 
  | DROP  -> (null : System.Object) 
  | KEY  -> (null : System.Object) 
  | STORE  -> (null : System.Object) 
  | PUBLIC  -> (null : System.Object) 
  | ENTRY  -> (null : System.Object) 
  | USE  -> (null : System.Object) 
  | NATIVE  -> (null : System.Object) 
  | U8  -> (null : System.Object) 
  | U64  -> (null : System.Object) 
  | U128  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | ADDRESS  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | MUT  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | SQBRA  -> (null : System.Object) 
  | SQKET  -> (null : System.Object) 
  | CURBRA  -> (null : System.Object) 
  | CURKET  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON2  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | MOVLOC  -> (null : System.Object) 
  | CPYLOC  -> (null : System.Object) 
  | STLOC  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | LDU8  -> (null : System.Object) 
  | LDU128  -> (null : System.Object) 
  | LDU64  -> (null : System.Object) 
  | LDCONST  -> (null : System.Object) 
  | LDTRUE  -> (null : System.Object) 
  | LDFALSE  -> (null : System.Object) 
  | BRANCH  -> (null : System.Object) 
  | BRTRUE  -> (null : System.Object) 
  | BRFALSE  -> (null : System.Object) 
  | NOP  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | BOR  -> (null : System.Object) 
  | BAND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SHL  -> (null : System.Object) 
  | SHR  -> (null : System.Object) 
  | POP  -> (null : System.Object) 
  | ABORT  -> (null : System.Object) 
  | READREF  -> (null : System.Object) 
  | WRITEREF  -> (null : System.Object) 
  | FREEZEREF  -> (null : System.Object) 
  | RET  -> (null : System.Object) 
  | BORROWLOC  -> (null : System.Object) 
  | BORROWFIELD  -> (null : System.Object) 
  | BORROWGLOBAL  -> (null : System.Object) 
  | PACK  -> (null : System.Object) 
  | UNPACK  -> (null : System.Object) 
  | EXISTS  -> (null : System.Object) 
  | MOVETO  -> (null : System.Object) 
  | MOVEFROM  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;4us;5us;2us;65535us;4us;10us;11us;12us;2us;65535us;4us;11us;11us;11us;1us;65535us;5us;6us;2us;65535us;5us;16us;17us;18us;2us;65535us;5us;17us;17us;17us;1us;65535us;20us;21us;1us;65535us;22us;23us;2us;65535us;6us;7us;28us;29us;2us;65535us;6us;28us;28us;28us;1us;65535us;35us;36us;3us;65535us;22us;43us;32us;43us;44us;43us;3us;65535us;22us;27us;32us;33us;44us;45us;2us;65535us;37us;38us;46us;47us;2us;65535us;37us;46us;46us;46us;3us;65535us;6us;30us;28us;30us;54us;55us;3us;65535us;6us;54us;28us;54us;54us;54us;2us;65535us;34us;35us;131us;132us;11us;65535us;37us;53us;41us;42us;46us;53us;59us;60us;67us;68us;69us;70us;72us;71us;90us;89us;102us;103us;124us;125us;129us;89us;2us;65535us;59us;61us;72us;73us;2us;65535us;25us;26us;75us;76us;2us;65535us;25us;74us;75us;74us;3us;65535us;2us;3us;13us;14us;127us;128us;5us;65535us;2us;81us;13us;81us;83us;84us;85us;86us;127us;81us;5us;65535us;2us;82us;13us;82us;83us;82us;85us;82us;127us;82us;2us;65535us;90us;91us;129us;94us;3us;65535us;97us;98us;110us;111us;117us;118us;3us;65535us;37us;48us;46us;48us;106us;107us;1us;65535us;129us;130us;1us;65535us;49us;50us;1us;65535us;149us;150us;2us;65535us;149us;152us;158us;159us;2us;65535us;154us;155us;162us;163us;1us;65535us;49us;109us;1us;65535us;49us;96us;1us;65535us;49us;105us;1us;65535us;49us;95us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;11us;13us;16us;19us;21us;23us;26us;29us;31us;35us;39us;42us;45us;49us;53us;56us;68us;71us;74us;77us;81us;87us;93us;96us;100us;104us;106us;108us;110us;113us;116us;118us;120us;122us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;4us;5us;1us;5us;1us;6us;1us;6us;1us;6us;1us;7us;2us;9us;10us;1us;10us;1us;11us;1us;11us;1us;11us;1us;11us;1us;11us;1us;11us;1us;12us;1us;12us;1us;14us;2us;15us;16us;1us;16us;1us;17us;1us;17us;1us;17us;1us;17us;1us;17us;1us;17us;1us;17us;1us;18us;1us;18us;1us;18us;1us;20us;1us;20us;1us;20us;2us;21us;23us;1us;23us;1us;23us;2us;24us;25us;1us;25us;1us;26us;1us;26us;1us;26us;2us;27us;41us;1us;27us;1us;28us;2us;29us;30us;1us;30us;1us;31us;1us;32us;1us;33us;2us;34us;36us;3us;34us;44us;45us;1us;36us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;2us;42us;43us;1us;42us;1us;43us;1us;43us;3us;44us;44us;45us;2us;44us;45us;1us;45us;2us;46us;47us;1us;47us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;3us;53us;54us;55us;1us;54us;1us;54us;1us;55us;1us;55us;1us;56us;1us;57us;2us;58us;59us;1us;59us;1us;59us;1us;60us;1us;61us;1us;62us;1us;64us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;65us;1us;66us;1us;66us;1us;66us;1us;66us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;67us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;68us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;69us;1us;70us;1us;70us;1us;70us;1us;70us;1us;71us;1us;71us;1us;71us;1us;71us;1us;72us;1us;72us;1us;72us;1us;72us;1us;73us;1us;73us;1us;73us;1us;73us;1us;73us;1us;73us;1us;73us;1us;74us;1us;74us;1us;74us;1us;74us;1us;74us;2us;75us;76us;1us;76us;1us;76us;1us;76us;2us;77us;78us;1us;78us;1us;78us;1us;79us;1us;80us;1us;81us;1us;82us;1us;83us;1us;84us;1us;85us;1us;86us;1us;87us;1us;88us;1us;89us;1us;90us;1us;91us;1us;92us;1us;93us;1us;94us;1us;95us;1us;96us;1us;97us;1us;98us;1us;99us;1us;100us;1us;101us;1us;102us;1us;103us;1us;104us;1us;105us;1us;106us;1us;107us;1us;108us;1us;109us;1us;110us;1us;111us;1us;112us;1us;113us;1us;114us;1us;115us;1us;116us;1us;117us;1us;118us;1us;119us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;25us;27us;29us;31us;33us;35us;38us;40us;42us;44us;46us;48us;50us;52us;54us;56us;58us;61us;63us;65us;67us;69us;71us;73us;75us;77us;79us;81us;83us;85us;87us;89us;92us;94us;96us;99us;101us;103us;105us;107us;110us;112us;114us;117us;119us;121us;123us;125us;128us;132us;134us;136us;138us;140us;142us;144us;147us;149us;151us;153us;157us;160us;162us;165us;167us;169us;171us;173us;175us;177us;179us;183us;185us;187us;189us;191us;193us;195us;198us;200us;202us;204us;206us;208us;210us;212us;214us;216us;218us;220us;222us;224us;226us;228us;230us;232us;234us;236us;238us;240us;242us;244us;246us;248us;250us;252us;254us;256us;258us;260us;262us;264us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;286us;288us;290us;292us;294us;296us;298us;300us;302us;304us;306us;308us;310us;312us;314us;316us;318us;320us;322us;324us;326us;328us;330us;332us;335us;337us;339us;341us;344us;346us;348us;350us;352us;354us;356us;358us;360us;362us;364us;366us;368us;370us;372us;374us;376us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;426us;428us;|]
let _fsyacc_action_rows = 205
let _fsyacc_actionTableElements = [|1us;32768us;1us;2us;0us;49152us;2us;32768us;78us;87us;79us;88us;1us;32768us;24us;4us;1us;16387us;10us;13us;1us;16392us;2us;19us;3us;32768us;8us;56us;9us;57us;11us;58us;1us;32768us;25us;8us;1us;32768us;0us;9us;0us;16385us;0us;16386us;1us;16388us;10us;13us;0us;16389us;2us;32768us;78us;87us;79us;88us;1us;32768us;30us;15us;0us;16390us;0us;16391us;1us;16393us;2us;19us;0us;16394us;1us;32768us;78us;20us;1us;16397us;3us;25us;1us;32768us;24us;22us;1us;16406us;78us;40us;1us;32768us;25us;24us;0us;16395us;4us;32768us;4us;77us;5us;78us;6us;79us;7us;80us;0us;16396us;0us;16398us;3us;16399us;8us;56us;9us;57us;11us;58us;0us;16400us;1us;32768us;78us;31us;1us;32768us;20us;32us;1us;16406us;78us;40us;1us;32768us;21us;34us;1us;16419us;26us;59us;1us;16403us;24us;37us;0us;16401us;7us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;51us;79us;93us;1us;32768us;25us;39us;0us;16402us;1us;32768us;26us;41us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;0us;16404us;1us;16405us;28us;44us;1us;16406us;78us;40us;0us;16407us;7us;16408us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;51us;79us;93us;0us;16409us;1us;32768us;26us;49us;47us;32768us;31us;170us;32us;171us;33us;172us;34us;127us;35us;133us;36us;141us;37us;137us;38us;145us;39us;202us;40us;203us;41us;174us;42us;175us;43us;176us;44us;177us;45us;178us;46us;179us;47us;180us;48us;181us;49us;182us;50us;183us;51us;184us;52us;185us;53us;186us;54us;187us;55us;188us;56us;189us;57us;190us;58us;191us;59us;192us;60us;193us;61us;194us;62us;195us;63us;196us;64us;197us;65us;198us;66us;199us;67us;200us;68us;201us;69us;204us;70us;173us;71us;116us;72us;166us;73us;164us;74us;165us;75us;167us;76us;168us;77us;169us;0us;16410us;1us;16425us;26us;52us;0us;16411us;0us;16412us;3us;16413us;8us;56us;9us;57us;11us;58us;0us;16414us;0us;16415us;0us;16416us;0us;16417us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;1us;16418us;19us;72us;0us;16420us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;7us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;18us;69us;78us;66us;0us;16426us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;0us;16427us;1us;16428us;19us;72us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;0us;16429us;1us;16430us;28us;75us;4us;32768us;4us;77us;5us;78us;6us;79us;7us;80us;0us;16431us;0us;16432us;0us;16433us;0us;16434us;0us;16435us;0us;16436us;2us;16437us;27us;83us;29us;85us;2us;32768us;78us;87us;79us;88us;0us;16438us;2us;32768us;78us;87us;79us;88us;0us;16439us;0us;16440us;0us;16441us;1us;16442us;28us;90us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;0us;16443us;0us;16444us;0us;16445us;0us;16446us;0us;16448us;1us;32768us;22us;97us;1us;32768us;79us;92us;1us;32768us;23us;99us;1us;32768us;20us;100us;1us;32768us;78us;101us;1us;32768us;26us;102us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;1us;32768us;21us;104us;0us;16449us;1us;32768us;20us;106us;1us;32768us;79us;93us;1us;32768us;21us;108us;0us;16450us;1us;32768us;22us;110us;1us;32768us;79us;92us;1us;32768us;23us;112us;1us;32768us;20us;113us;1us;32768us;78us;114us;1us;32768us;21us;115us;0us;16451us;1us;32768us;22us;117us;1us;32768us;79us;92us;1us;32768us;23us;119us;1us;32768us;20us;120us;1us;32768us;78us;121us;1us;32768us;27us;122us;1us;32768us;78us;123us;1us;32768us;26us;124us;6us;32768us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;1us;32768us;21us;126us;0us;16452us;2us;32768us;78us;87us;79us;88us;1us;32768us;20us;129us;6us;16447us;12us;62us;13us;63us;15us;64us;16us;65us;17us;67us;78us;66us;1us;32768us;21us;131us;1us;16419us;26us;59us;0us;16453us;1us;32768us;20us;134us;1us;32768us;79us;135us;1us;32768us;21us;136us;0us;16454us;1us;32768us;20us;138us;1us;32768us;79us;139us;1us;32768us;21us;140us;0us;16455us;1us;32768us;20us;142us;1us;32768us;79us;143us;1us;32768us;21us;144us;0us;16456us;1us;32768us;22us;146us;1us;32768us;79us;147us;1us;32768us;23us;148us;1us;32768us;20us;149us;1us;32768us;78us;157us;1us;32768us;21us;151us;0us;16457us;1us;32768us;26us;153us;1us;32768us;22us;154us;1us;32768us;79us;161us;1us;32768us;23us;156us;0us;16458us;1us;16459us;20us;158us;1us;32768us;78us;157us;1us;32768us;21us;160us;0us;16460us;1us;16461us;28us;162us;1us;32768us;79us;161us;0us;16462us;0us;16463us;0us;16464us;0us;16465us;0us;16466us;0us;16467us;0us;16468us;0us;16469us;0us;16470us;0us;16471us;0us;16472us;0us;16473us;0us;16474us;0us;16475us;0us;16476us;0us;16477us;0us;16478us;0us;16479us;0us;16480us;0us;16481us;0us;16482us;0us;16483us;0us;16484us;0us;16485us;0us;16486us;0us;16487us;0us;16488us;0us;16489us;0us;16490us;0us;16491us;0us;16492us;0us;16493us;0us;16494us;0us;16495us;0us;16496us;0us;16497us;0us;16498us;0us;16499us;0us;16500us;0us;16501us;0us;16502us;0us;16503us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;8us;10us;12us;16us;18us;20us;21us;22us;24us;25us;28us;30us;31us;32us;34us;35us;37us;39us;41us;43us;45us;46us;51us;52us;53us;57us;58us;60us;62us;64us;66us;68us;70us;71us;79us;81us;82us;84us;91us;92us;94us;96us;97us;105us;106us;108us;156us;157us;159us;160us;161us;165us;166us;167us;168us;169us;176us;178us;179us;180us;181us;182us;183us;184us;192us;193us;200us;201us;203us;210us;211us;213us;218us;219us;220us;221us;222us;223us;224us;227us;230us;231us;234us;235us;236us;237us;239us;246us;247us;248us;249us;250us;251us;253us;255us;257us;259us;261us;263us;270us;272us;273us;275us;277us;279us;280us;282us;284us;286us;288us;290us;292us;293us;295us;297us;299us;301us;303us;305us;307us;309us;316us;318us;319us;322us;324us;331us;333us;335us;336us;338us;340us;342us;343us;345us;347us;349us;350us;352us;354us;356us;357us;359us;361us;363us;365us;367us;369us;370us;372us;374us;376us;378us;379us;381us;383us;385us;386us;388us;390us;391us;392us;393us;394us;395us;396us;397us;398us;399us;400us;401us;402us;403us;404us;405us;406us;407us;408us;409us;410us;411us;412us;413us;414us;415us;416us;417us;418us;419us;420us;421us;422us;423us;424us;425us;426us;427us;428us;429us;430us;431us;|]
let _fsyacc_reductionSymbolCounts = [|1us;8us;1us;0us;1us;2us;3us;1us;0us;1us;2us;6us;2us;0us;1us;1us;2us;7us;3us;0us;3us;1us;0us;3us;1us;2us;3us;2us;1us;1us;2us;1us;1us;1us;2us;0us;2us;1us;1us;1us;1us;1us;2us;3us;3us;3us;1us;3us;1us;1us;1us;1us;1us;1us;3us;3us;1us;1us;1us;3us;1us;1us;1us;0us;1us;9us;4us;7us;11us;6us;4us;4us;4us;7us;5us;1us;4us;1us;3us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;5us;5us;6us;6us;7us;8us;8us;9us;10us;10us;11us;12us;12us;13us;14us;14us;14us;15us;15us;16us;16us;16us;17us;17us;18us;18us;18us;19us;19us;19us;20us;20us;20us;20us;20us;20us;20us;21us;21us;22us;22us;23us;23us;23us;23us;24us;25us;25us;25us;26us;26us;27us;27us;28us;29us;30us;30us;31us;31us;31us;31us;31us;31us;31us;31us;31us;31us;32us;33us;33us;34us;34us;35us;35us;35us;35us;35us;35us;36us;36us;36us;36us;37us;37us;37us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;38us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16385us;16386us;65535us;16389us;65535us;65535us;16390us;16391us;65535us;16394us;65535us;65535us;65535us;65535us;65535us;16395us;65535us;16396us;16398us;65535us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;16401us;65535us;65535us;16402us;65535us;65535us;16404us;65535us;65535us;16407us;65535us;16409us;65535us;65535us;16410us;65535us;16411us;16412us;65535us;16414us;16415us;16416us;16417us;65535us;65535us;16420us;16421us;16422us;16423us;16424us;16425us;65535us;16426us;65535us;16427us;65535us;65535us;16429us;65535us;65535us;16431us;16432us;16433us;16434us;16435us;16436us;65535us;65535us;16438us;65535us;16439us;16440us;16441us;65535us;65535us;16443us;16444us;16445us;16446us;16448us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16449us;65535us;65535us;65535us;16450us;65535us;65535us;65535us;65535us;65535us;65535us;16451us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16452us;65535us;65535us;65535us;65535us;65535us;16453us;65535us;65535us;65535us;16454us;65535us;65535us;65535us;16455us;65535us;65535us;65535us;16456us;65535us;65535us;65535us;65535us;65535us;65535us;16457us;65535us;65535us;65535us;65535us;16458us;65535us;65535us;65535us;16460us;65535us;65535us;16462us;16463us;16464us;16465us;16466us;16467us;16468us;16469us;16470us;16471us;16472us;16473us;16474us;16475us;16476us;16477us;16478us;16479us;16480us;16481us;16482us;16483us;16484us;16485us;16486us;16487us;16488us;16489us;16490us;16491us;16492us;16493us;16494us;16495us;16496us;16497us;16498us;16499us;16500us;16501us;16502us;16503us;|]
let _fsyacc_reductions = lazy [|
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  AlgoMove.Transpiler.Absyn.Move.program  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 714 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_qid in
            let _4 = parseState.GetInput(4) :?> 'gentype_imports in
            let _5 = parseState.GetInput(5) :?> 'gentype_structs in
            let _6 = parseState.GetInput(6) :?> 'gentype_funs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                       { modulename = _2; imports = _4; structs = _5; funs = _6 } 
                   )
# 44 "Parser.fsy"
                 :  AlgoMove.Transpiler.Absyn.Move.program ));
# 728 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_imports_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                       _1 
                   )
# 47 "Parser.fsy"
                 : 'gentype_imports));
# 739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                       [] 
                   )
# 48 "Parser.fsy"
                 : 'gentype_imports));
# 749 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_import in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                       [_1] 
                   )
# 51 "Parser.fsy"
                 : 'gentype_imports_));
# 760 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_import in
            let _2 = parseState.GetInput(2) :?> 'gentype_imports_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                       _1 :: _2 
                   )
# 52 "Parser.fsy"
                 : 'gentype_imports_));
# 772 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_qid in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                       _2 
                   )
# 55 "Parser.fsy"
                 : 'gentype_import));
# 783 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_structs_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                       _1 
                   )
# 58 "Parser.fsy"
                 : 'gentype_structs));
# 794 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                       [] 
                   )
# 59 "Parser.fsy"
                 : 'gentype_structs));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_structt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                       [_1] 
                   )
# 62 "Parser.fsy"
                 : 'gentype_structs_));
# 815 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_structt in
            let _2 = parseState.GetInput(2) :?> 'gentype_structs_ in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                       _1 :: _2 
                   )
# 63 "Parser.fsy"
                 : 'gentype_structs_));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> System.String in
            let _3 = parseState.GetInput(3) :?> 'gentype_has_capabs in
            let _5 = parseState.GetInput(5) :?> 'gentype_fields in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                       { id = _2; capabs = _3; fields = _5 } 
                   )
# 67 "Parser.fsy"
                 : 'gentype_structt));
# 840 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_capabs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                       _2 
                   )
# 70 "Parser.fsy"
                 : 'gentype_has_capabs));
# 851 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                       [] 
                   )
# 71 "Parser.fsy"
                 : 'gentype_has_capabs));
# 861 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                       _1 
                   )
# 74 "Parser.fsy"
                 : 'gentype_fields));
# 872 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funn in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                       [_1] 
                   )
# 77 "Parser.fsy"
                 : 'gentype_funs));
# 883 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funn in
            let _2 = parseState.GetInput(2) :?> 'gentype_funs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                       _1 :: _2 
                   )
# 78 "Parser.fsy"
                 : 'gentype_funs));
# 895 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_quals in
            let _2 = parseState.GetInput(2) :?> System.String in
            let _4 = parseState.GetInput(4) :?> 'gentype_args in
            let _6 = parseState.GetInput(6) :?> 'gentype_return_ty in
            let _7 = parseState.GetInput(7) :?> 'gentype_optbody in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                       { quals = _1; id = _2; args = _4; ret = _6; body = List.toArray _7 } 
                   )
# 83 "Parser.fsy"
                 : 'gentype_funn));
# 910 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                       _2 
                   )
# 86 "Parser.fsy"
                 : 'gentype_optbody));
# 921 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                       [] 
                   )
# 87 "Parser.fsy"
                 : 'gentype_optbody));
# 931 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            let _3 = parseState.GetInput(3) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                       _1, _3 
                   )
# 90 "Parser.fsy"
                 : 'gentype_arg));
# 943 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                       [_1] 
                   )
# 93 "Parser.fsy"
                 : 'gentype_args));
# 954 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                       [] 
                   )
# 94 "Parser.fsy"
                 : 'gentype_args));
# 964 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arg in
            let _3 = parseState.GetInput(3) :?> 'gentype_args in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                       _1 :: _3 
                   )
# 95 "Parser.fsy"
                 : 'gentype_args));
# 976 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bodyline in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                       _1 
                   )
# 98 "Parser.fsy"
                 : 'gentype_body));
# 987 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bodyline in
            let _2 = parseState.GetInput(2) :?> 'gentype_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                       _1 @ _2 
                   )
# 99 "Parser.fsy"
                 : 'gentype_body));
# 999 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_opcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                       [_3] 
                   )
# 102 "Parser.fsy"
                 : 'gentype_bodyline));
# 1011 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                       [] 
                   )
# 103 "Parser.fsy"
                 : 'gentype_bodyline));
# 1022 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                       [] 
                   )
# 104 "Parser.fsy"
                 : 'gentype_bodyline));
# 1033 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qual in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                       [_1] 
                   )
# 107 "Parser.fsy"
                 : 'gentype_quals));
# 1044 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qual in
            let _2 = parseState.GetInput(2) :?> 'gentype_quals in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                       _1 :: _2 
                   )
# 108 "Parser.fsy"
                 : 'gentype_quals));
# 1056 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                       Public 
                   )
# 111 "Parser.fsy"
                 : 'gentype_qual));
# 1066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                       Entry 
                   )
# 112 "Parser.fsy"
                 : 'gentype_qual));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                           Native 
                   )
# 113 "Parser.fsy"
                 : 'gentype_qual));
# 1086 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                       Some _2 
                   )
# 116 "Parser.fsy"
                 : 'gentype_return_ty));
# 1097 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                       None 
                   )
# 117 "Parser.fsy"
                 : 'gentype_return_ty));
# 1107 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ty_tuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                       Some (ty.Tuple _2) 
                   )
# 118 "Parser.fsy"
                 : 'gentype_return_ty));
# 1118 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                       ty.U8 
                   )
# 121 "Parser.fsy"
                 : 'gentype_ty));
# 1128 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                       ty.U64 
                   )
# 122 "Parser.fsy"
                 : 'gentype_ty));
# 1138 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                       ty.Bool 
                   )
# 123 "Parser.fsy"
                 : 'gentype_ty));
# 1148 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                       ty.Address 
                   )
# 124 "Parser.fsy"
                 : 'gentype_ty));
# 1158 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                       ty.Typename _1 
                   )
# 125 "Parser.fsy"
                 : 'gentype_ty));
# 1169 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                       ty.Ref _2 
                   )
# 126 "Parser.fsy"
                 : 'gentype_ty));
# 1180 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                       ty.MutRef _3 
                   )
# 127 "Parser.fsy"
                 : 'gentype_ty));
# 1191 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _3 = parseState.GetInput(3) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                       [_1; _3] 
                   )
# 130 "Parser.fsy"
                 : 'gentype_ty_tuple));
# 1203 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _3 = parseState.GetInput(3) :?> 'gentype_ty_tuple in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                       _1 :: _3 
                   )
# 131 "Parser.fsy"
                 : 'gentype_ty_tuple));
# 1215 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_capab in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                       [_1] 
                   )
# 134 "Parser.fsy"
                 : 'gentype_capabs));
# 1226 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_capab in
            let _3 = parseState.GetInput(3) :?> 'gentype_capabs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                       _1 :: _3 
                   )
# 135 "Parser.fsy"
                 : 'gentype_capabs));
# 1238 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                       Copy 
                   )
# 138 "Parser.fsy"
                 : 'gentype_capab));
# 1248 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                       Drop 
                   )
# 139 "Parser.fsy"
                 : 'gentype_capab));
# 1258 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                       Key 
                   )
# 140 "Parser.fsy"
                 : 'gentype_capab));
# 1268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                       Store 
                   )
# 141 "Parser.fsy"
                 : 'gentype_capab));
# 1278 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qid_parts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                       let l = List.rev _1 in List.rev (List.tail l), List.head l 
                   )
# 144 "Parser.fsy"
                 : 'gentype_qid));
# 1289 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qid_part in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                             [_1] 
                   )
# 147 "Parser.fsy"
                 : 'gentype_qid_parts));
# 1300 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qid_part in
            let _3 = parseState.GetInput(3) :?> 'gentype_qid_parts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                                   _1 :: _3 
                   )
# 148 "Parser.fsy"
                 : 'gentype_qid_parts));
# 1312 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_qid_part in
            let _3 = parseState.GetInput(3) :?> 'gentype_qid_parts in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                   _1 :: _3 
                   )
# 149 "Parser.fsy"
                 : 'gentype_qid_parts));
# 1324 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                        _1 
                   )
# 152 "Parser.fsy"
                 : 'gentype_qid_part));
# 1335 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                      _1 
                   )
# 153 "Parser.fsy"
                 : 'gentype_qid_part));
# 1346 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                       [_1] 
                   )
# 156 "Parser.fsy"
                 : 'gentype_tys));
# 1357 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _3 = parseState.GetInput(3) :?> 'gentype_tys in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                       _1 :: _3 
                   )
# 157 "Parser.fsy"
                 : 'gentype_tys));
# 1369 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                       byte _1 
                   )
# 160 "Parser.fsy"
                 : 'gentype_index));
# 1380 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                       uint _1 
                   )
# 163 "Parser.fsy"
                 : 'gentype_label));
# 1391 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_tys in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                       _1 
                   )
# 166 "Parser.fsy"
                 : 'gentype_argtys));
# 1402 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                       [] 
                   )
# 167 "Parser.fsy"
                 : 'gentype_argtys));
# 1412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_opcodes_no_imm in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                                   _1 
                   )
# 172 "Parser.fsy"
                 : 'gentype_opcode));
# 1423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_opcodes_index in
            let _3 = parseState.GetInput(3) :?> 'gentype_index in
            let _6 = parseState.GetInput(6) :?> System.String in
            let _8 = parseState.GetInput(8) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                                   _1 _3 
                   )
# 173 "Parser.fsy"
                 : 'gentype_opcode));
# 1437 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_opcodes_label in
            let _3 = parseState.GetInput(3) :?> 'gentype_label in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                                   _1 _3 
                   )
# 174 "Parser.fsy"
                 : 'gentype_opcode));
# 1449 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_opcode_typename in
            let _3 = parseState.GetInput(3) :?> 'gentype_index in
            let _6 = parseState.GetInput(6) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                                   _1 _6 
                   )
# 175 "Parser.fsy"
                 : 'gentype_opcode));
# 1462 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_index in
            let _6 = parseState.GetInput(6) :?> System.String in
            let _8 = parseState.GetInput(8) :?> System.String in
            let _10 = parseState.GetInput(10) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                                      BorrowField (_6, _8, _10) 
                   )
# 177 "Parser.fsy"
                 : 'gentype_opcode));
# 1476 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_qid in
            let _4 = parseState.GetInput(4) :?> 'gentype_argtys in
            let _6 = parseState.GetInput(6) :?> 'gentype_return_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                                                   Call (_2, _4, _6) 
                   )
# 179 "Parser.fsy"
                 : 'gentype_opcode));
# 1489 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                                   LdU8 (byte _3) 
                   )
# 180 "Parser.fsy"
                 : 'gentype_opcode));
# 1500 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                                   LdU64 (uint64 _3) 
                   )
# 181 "Parser.fsy"
                 : 'gentype_opcode));
# 1511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                                   LdU128 (System.UInt128.Parse _3) 
                   )
# 182 "Parser.fsy"
                 : 'gentype_opcode));
# 1522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> System.String in
            let _6 = parseState.GetInput(6) :?> 'gentype_const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                                   LdConst _6 
                   )
# 183 "Parser.fsy"
                 : 'gentype_opcode));
# 1534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_const_ty in
            let _4 = parseState.GetInput(4) :?> 'gentype_nums in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                              _1, _4 
                   )
# 186 "Parser.fsy"
                 : 'gentype_const));
# 1546 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                       ty.Typename (_1.ToLower()) 
                   )
# 189 "Parser.fsy"
                 : 'gentype_const_ty));
# 1557 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            let _3 = parseState.GetInput(3) :?> 'gentype_const_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                       ty.Cons (_1.ToLower(), _3) 
                   )
# 190 "Parser.fsy"
                 : 'gentype_const_ty));
# 1569 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                       [int _1] 
                   )
# 193 "Parser.fsy"
                 : 'gentype_nums));
# 1580 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> System.String in
            let _3 = parseState.GetInput(3) :?> 'gentype_nums in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                       int _1 :: _3 
                   )
# 194 "Parser.fsy"
                 : 'gentype_nums));
# 1592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                       Pack 
                   )
# 197 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1602 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                       Unpack 
                   )
# 198 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1612 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                       BorrowGlobal 
                   )
# 199 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                       Exists 
                   )
# 200 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1632 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                       MoveTo 
                   )
# 201 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1642 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                                       MoveFrom 
                   )
# 202 "Parser.fsy"
                 : 'gentype_opcode_typename));
# 1652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                                       MovLoc 
                   )
# 206 "Parser.fsy"
                 : 'gentype_opcodes_index));
# 1662 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                       CpyLoc 
                   )
# 207 "Parser.fsy"
                 : 'gentype_opcodes_index));
# 1672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                       StLoc 
                   )
# 208 "Parser.fsy"
                 : 'gentype_opcodes_index));
# 1682 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                       BorrowLoc 
                   )
# 209 "Parser.fsy"
                 : 'gentype_opcodes_index));
# 1692 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                       fun l -> Br (None, l) 
                   )
# 212 "Parser.fsy"
                 : 'gentype_opcodes_label));
# 1702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                                       fun l -> Br (Some true, l) 
                   )
# 213 "Parser.fsy"
                 : 'gentype_opcodes_label));
# 1712 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                                       fun l -> Br (Some false, l) 
                   )
# 214 "Parser.fsy"
                 : 'gentype_opcodes_label));
# 1722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                              Nop 
                   )
# 217 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1732 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                                         Add 
                   )
# 218 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1742 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                                                         Sub 
                   )
# 219 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1752 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                                                         Mul 
                   )
# 220 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1762 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                                         Div 
                   )
# 221 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1772 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                                         Mod 
                   )
# 222 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1782 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                                         Eq 
                   )
# 223 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1792 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                                                         Neq 
                   )
# 224 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1802 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                                                         Lt 
                   )
# 225 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                                                         Le 
                   )
# 226 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1822 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                                         Gt 
                   )
# 227 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                                                         Ge 
                   )
# 228 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1842 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                                                         BOr 
                   )
# 229 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1852 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "Parser.fsy"
                                                                         BAnd 
                   )
# 230 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1862 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                          Or 
                   )
# 231 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1872 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                              And 
                   )
# 232 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1882 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                                                         Xor 
                   )
# 233 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1892 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "Parser.fsy"
                                                                         Not 
                   )
# 234 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1902 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                                                         Shl 
                   )
# 235 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1912 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                                                         Shr 
                   )
# 236 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1922 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                                                         Pop 
                   )
# 237 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1932 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                                                         Abort 
                   )
# 238 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1942 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                                                         ReadRef 
                   )
# 240 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1952 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                                                         WriteRef 
                   )
# 241 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1962 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                                                         FreezeRef 
                   )
# 242 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1972 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                                                                         LdBool true 
                   )
# 244 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1982 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                                                         LdBool false 
                   )
# 245 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
# 1992 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                                                         Ret 
                   )
# 246 "Parser.fsy"
                 : 'gentype_opcodes_no_imm));
|]
# 2003 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 83;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let program lexer lexbuf :  AlgoMove.Transpiler.Absyn.Move.program  =
    engine lexer lexbuf 0 :?> _
