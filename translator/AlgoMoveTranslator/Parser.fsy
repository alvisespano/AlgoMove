%{

open AlgoMoveTranspiler.Absyn

open FSharp.Common
open FSharp.Common.Parsing.LexYacc
open AlgoMoveTranspiler 
open AlgoMoveTranspiler.Absyn

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))

%}
 

%token <System.UInt64> UINT64
%token <System.String> ID

%token MODULE STRUCT HAS COPY DROP KEY STORE PUBLIC ENTRY
       TU64 TBOOL TADDRESS
       BRA KET SQBRA SQKET CURBRA CURKET
       COLON SEMICOLON DOT COMMA
       MOVLOC CPYLOC STLOC
%token EOF

%type < AlgoMoveTranspiler.Absyn.Module > modulee

%start modulee

%%

modulee: 
    MODULE qid CURBRA
        structs
        funs
    CURKET EOF                  { { qid = $2; structs = $4; funs = $5 } }

structs:
    structt                     { [$1] }
  |                             { [] } 
  | structt structs             { $1 :: $2 }
  
structt:
    STRUCT ID CURBRA
    fields CURKET               { { id = $2; capabs = []; fields = $4 } }
  | STRUCT ID
    HAS capabs CURBRA
    fields CURKET               { { id = $2; capabs = $4; fields = $6 } }

fields:
    args                        { $1 }

funs:
    funn                         { [$1] }
  |                              { [] }
  | funn funs                    { $1 :: $2 }
 
funn:
    quals ID BRA args KET
    return_ty
    CURBRA skiplocs 
    instrs CURKET               { { quals = $1; id = $2; args = $4; ret = $6; body = $9 } }

skiploc:
    label COLON ID ty           {}

skiplocs:
    skiploc                     { [$1] }
  |                             { [] }
  | skiploc SEMICOLON skiplocs  { $1 :: $3 }
   
arg:
    ID COLON ty                 { $1, $3 }

args:
    arg                         { [$1] }
  |                             { [] }
  | arg COMMA args              { $1 :: $3 }

instr:
    label COLON opcode          { $1, $3 } 

instrs:
    instr                       { [$1] }
  |                             { [] }
  | instr instrs                { $1 :: $2 }

quals:
    qual                        { [$1] }
  | qual quals                  { $1 :: $2 }

qual:
    PUBLIC                      { Public }
  | ENTRY                       { Entry }

return_ty:
    COLON ty                    { Some $2 }
  |                             { None }

ty:
    TU64                        { U64 }
  | TBOOL                       { Bool }
  | TADDRESS                    { Address }

capabs:
    capab                       { [$1] }
  | capab COMMA capabs          { $1 :: $3 }

capab:
  | COPY                        { Copy }
  | DROP                        { Drop }
  | KEY                         { Key }
  | STORE                       { Store }
 
qid:
    ID                          { [$1] }      
  | ID DOT qid                  { $1 :: $3 }

label:
    ID                          { $1 }

loc:
    UINT64                      { $1 }

opcode:
    MOVLOC SQBRA loc SQKET
    BRA args KET                { MovLoc $3 }
  | CPYLOC SQBRA loc SQKET
    BRA args KET                { CpyLoc $3 }
  | STLOC SQBRA loc SQKET
    BRA args KET                { StLoc $3 }
